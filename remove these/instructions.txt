# Adding a Table of Contents for the Species Page

You can add an interactive table of contents for the species section that links to the various headers. Here's how to implement it:

## 1. Create the Table of Contents Structure

First, let's add a table of contents component at the beginning of the races content section:

```html
<!-- Add this right after your opening races-container div -->
<div id="species-toc" class="toc-container">
  <h3>Table of Contents</h3>
  <ul id="toc-list" class="toc-list">
    <!-- TOC entries will be populated via JavaScript -->
  </ul>
</div>
```

## 2. Add the JavaScript to Generate the TOC

Add this script to dynamically generate the table of contents based on the headers in your races content:

```javascript
// Add this to your existing script section or create a new one
function generateTableOfContents() {
  // Get the races content element
  const racesContent = document.getElementById('races-content');
  const tocList = document.getElementById('toc-list');
  
  if (!racesContent || !tocList) return;
  
  // Get all headers (h2, h3, h4) from the races content
  const headers = racesContent.querySelectorAll('h2, h3, h4');
  
  // Clear any existing TOC entries
  tocList.innerHTML = '';
  
  // Process each header to create TOC entries
  headers.forEach((header, index) => {
    // Skip headers that don't need to be in TOC (optional)
    if (header.textContent === "Table of Contents") return;
    
    // Create unique ID for each header if it doesn't have one
    if (!header.id) {
      header.id = `species-header-${index}`;
    }
    
    // Create the TOC entry
    const listItem = document.createElement('li');
    const link = document.createElement('a');
    
    // Add appropriate class based on header level for indentation
    listItem.className = `toc-level-${header.tagName.toLowerCase()}`;
    
    // Set the link text and href
    link.textContent = header.textContent;
    link.href = `#${header.id}`;
    
    // Add click event to scroll to the section
    link.addEventListener('click', (e) => {
      e.preventDefault();
      document.getElementById(header.id).scrollIntoView({ behavior: 'smooth' });
    });
    
    listItem.appendChild(link);
    tocList.appendChild(listItem);
  });
}

// Call the function when races section is loaded
document.getElementById('btn-races').addEventListener('click', () => {
  // Wait a bit for the content to be fully rendered before generating TOC
  setTimeout(generateTableOfContents, 100);
});
```

## 3. Add CSS Styling for the TOC

Add these styles to make your table of contents look good:

```css
/* Add this to your existing style section */
.toc-container {
  background-color: rgba(245, 245, 220, 0.7);
  border: 1px solid #d4af37;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 30px;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
}

.toc-container h3 {
  text-align: center;
  margin-top: 0;
  border-bottom: 1px solid #d4af37;
  padding-bottom: 10px;
}

.toc-list {
  list-style-type: none;
  padding-left: 5px;
}

.toc-list li {
  margin: 5px 0;
}

.toc-list a {
  text-decoration: none;
  color: #704214;
  transition: color 0.3s;
}

.toc-list a:hover {
  color: #d4af37;
  text-decoration: underline;
}

/* Add indentation for different header levels */
.toc-level-h2 {
  font-weight: bold;
}

.toc-level-h3 {
  margin-left: 15px;
}

.toc-level-h4 {
  margin-left: 30px;
  font-size: 0.9em;
}
```

## 4. Ensure Headers Have Unique IDs

To ensure your headers have proper IDs for linking, you can add a function that assigns IDs to headers without them:

```javascript
function assignHeaderIDs() {
  const racesContent = document.getElementById('races-content');
  if (!racesContent) return;
  
  const headers = racesContent.querySelectorAll('h2, h3, h4');
  
  headers.forEach((header, index) => {
    if (!header.id) {
      // Create ID based on text content (simplified for links)
      const id = header.textContent
        .toLowerCase()
        .replace(/[^\w\s]/g, '')  // Remove special characters
        .replace(/\s+/g, '-');     // Replace spaces with hyphens
      
      header.id = id || `species-header-${index}`;
    }
  });
}

// Call this before generating the TOC
document.getElementById('btn-races').addEventListener('click', () => {
  setTimeout(() => {
    assignHeaderIDs();
    generateTableOfContents();
  }, 100);
});
```

## 5. Implementation Notes

1. Make sure to call the TOC generation function after the races content is loaded and displayed
2. The smooth scrolling behavior provides a better user experience
3. The indentation in the TOC helps users understand the document structure
4. You may want to adjust the styling to match your handbook's theme

This implementation will create a well-structured, interactive table of contents that helps users quickly navigate through your species content.